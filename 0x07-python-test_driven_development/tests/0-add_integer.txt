# 0-add_integer.txt
===========================
How to Use 0-add_integer.py
===========================

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.
::
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(4, 3)
7
::
>>> add_integer(4, -2)
2
floats provided are casted to ints
::
>>> add_integer(1.9, 0.1)
2
::
>>> add_integer(2.9, 0.2)
2
Floating and non-floating point values can be combined.
::
>>> add_integer(4.2, 5)
9
>>> add_integer(2)
100
Non-Numbers
===========
``add_integer()`` If either argument is a non-integer and non-float,
a TypeError is raised:
::
>>> add_integer("cisfun", 5)
Traceback (most recent call last):
TypeError: a must be an integer
::
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer
::
>>> add_integer(3.4, None)
Traceback (most recent call last):
TypeError: b must be an integer
TypeError message is only
printed for the first argument, if both argument are non integer or float
::
>>> add_integer("hello", "you")
Traceback (most recent call last):
TypeError: a must be an integer
::
>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
::
>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
::
>>> add_integer(2, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
The function will fail if infinity is provided.
