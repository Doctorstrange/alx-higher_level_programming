## How to Use 2-matrix_divided.py

This module defines a matrix division function ``matrix_divided(matrix, div)``.

## Usage

``matrix_divided(...)`` returns a new matrix with all elements divided by ``div``.
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>>matrix = [
...[1, 2, 3],
...[4, 5, 6]
]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
quotients are rounded to a maximum of two decimal places.
The original matrix is left unchanged.
::
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]
The function can also handle floating-point numbers.
>>> matrix = [
...     [1.25, -2.5, 3.75],
...     [4.0, 5.5, -6.0]
... ]

>>> print(matrix_divided(matrix, 2.5))
[[0.5, -1.0, 1.5], [1.6, 2.2, -2.4]]
Integers and floats can be combined.
::
>>> matrix = [
...     [1, -2.5, 3, 4.75, 5],
...     [-6.0, 7.0, 8, 9.5, 10]
... ]

>>> print(matrix_divided(matrix, 2.5))
[[0.4, -1.0, 1.2, 1.9, 2.0], [-2.4, 2.8, 3.2, 3.8, 4.0]]

## Invalid Divisors

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.
::
>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "not a number"))
Traceback (most recent call last):
TypeError: div must be a number
::
>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
TypeError: div must be a number
``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.
::
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

## Invalid Matrices

If the matrix parameter is not a list of lists consisting of either integers
or floats, a TypeError is raised.
::
>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
An empty list will also raise a TypeError
>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
 an empty list of lists is valid.
>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]
The same TypeError is raised if matrix is not specifically a list of lists.
lists.
>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
The same TypeError is raised if any elements in matrix are neither
integers nor floats.
::
>>> matrix = [
... [1, 2, 3],
... [4, "not a number", 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
